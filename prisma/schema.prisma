generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = "sqlserver://185.210.92.248:1433;database=PinebiWebReport;user=EDonusum;password=150399AA-DB5B-47D9-BF31-69EB984CB5DF;trustServerCertificate=true;encrypt=true"
}

model Company {
  id                String            @id @default(cuid())
  name              String
  code              String            @unique
  address           String?
  phone             String?
  email             String?
  taxNumber         String?
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  calendarEvents    CalendarEvent[]
  productCategories ProductCategory[]
  productForms      ProductForm[]
  products          Product[]
  reminders         Reminder[]
  reports           ReportConfig[]
  users             User[]

  @@map("Companies")
}

model User {
  id                     String               @id @default(cuid())
  username               String               @unique
  email                  String               @unique
  firstName              String
  lastName               String
  password               String
  companyId              String
  role                   String               @default("USER")
  isActive               Boolean              @default(true)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  assignedCalendarEvents CalendarEvent[]      @relation("CalendarEventAssignedTo")
  createdCalendarEvents  CalendarEvent[]      @relation("CalendarEventCreatedBy")
  dashboardLayout        DashboardLayout?
  dashboardWidgets       DashboardWidget[]
  assignedReminders      Reminder[]           @relation("ReminderAssignedTo")
  createdReminders       Reminder[]           @relation("ReminderCreatedBy")
  reports                ReportConfig[]
  executions             ReportExecution[]
  reportUsers            ReportUsers[]
  gridSettings           UserGridSettings[]
  reportSettings         UserReportSettings[]
  company                Company              @relation(fields: [companyId], references: [id], onUpdate: NoAction)
  theme                  UserTheme?

  @@map("Users")
}

model ReportCategory {
  id          String           @id @default(cuid())
  name        String
  description String?
  parentId    String?
  icon        String?
  color       String?
  sortOrder   Int              @default(0)
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  parent      ReportCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    ReportCategory[] @relation("CategoryHierarchy")
  reports     ReportConfig[]

  @@map("ReportCategories")
}

model ReportConfig {
  id           String               @id @default(cuid())
  name         String
  description  String?
  endpointUrl  String
  apiUsername  String
  apiPassword  String
  headers      String?
  categoryId   String
  companyId    String
  userId       String
  isActive     Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  menuGroup    String?
  menuOrder    Int?                 @default(0)
  parameters   String?
  category     ReportCategory       @relation(fields: [categoryId], references: [id], onUpdate: NoAction)
  company      Company              @relation(fields: [companyId], references: [id], onUpdate: NoAction)
  user         User                 @relation(fields: [userId], references: [id], onUpdate: NoAction)
  executions   ReportExecution[]
  reportUsers  ReportUsers[]
  userSettings UserReportSettings[]

  @@map("ReportConfigs")
}

model ReportExecution {
  id           String       @id @default(cuid())
  reportId     String
  userId       String
  status       String       @default("RUNNING")
  startTime    DateTime     @default(now())
  endTime      DateTime?
  duration     Int?
  recordCount  Int?
  errorMessage String?
  parameters   String?
  resultData   String?
  createdAt    DateTime     @default(now())
  report       ReportConfig @relation(fields: [reportId], references: [id], onUpdate: NoAction)
  user         User         @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@map("ReportExecutions")
}

model ApiConfig {
  id                 String   @id @default(cuid())
  name               String
  description        String?
  baseUrl            String
  version            String   @default("1.0")
  authenticationType String   @default("BEARER")
  authUsername       String?
  authPassword       String?
  authToken          String?
  authApiKey         String?
  authApiKeyHeader   String?
  defaultHeaders     String?
  timeout            Int      @default(30000)
  retryCount         Int      @default(3)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("ApiConfigs")
}

model UserReportSettings {
  id             String       @id @default(cuid())
  userId         String
  reportId       String
  columnSettings String?
  filterSettings String?
  pivotSettings  String?
  viewType       String       @default("GRID")
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  report         ReportConfig @relation(fields: [reportId], references: [id], onUpdate: NoAction)
  user           User         @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@unique([userId, reportId])
  @@map("UserReportSettings")
}

model UserGridSettings {
  id              String   @id @default(cuid())
  userId          String
  gridType        String
  columnSettings  String?
  filterSettings  String?
  sortSettings    String?
  groupSettings   String?
  pivotSettings   String?
  sidebarSettings String?
  viewPreferences String?
  themeSettings   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@unique([userId, gridType])
  @@map("UserGridSettings")
}

model UserTheme {
  id              String   @id @default(cuid())
  userId          String   @unique
  themeName       String   @default("light")
  primaryColor    String   @default("#3b82f6")
  secondaryColor  String   @default("#64748b")
  accentColor     String   @default("#f59e0b")
  backgroundColor String   @default("#ffffff")
  textColor       String   @default("#1f2937")
  sidebarColor    String   @default("#f8fafc")
  borderRadius    String   @default("0.5rem")
  fontSize        String   @default("14px")
  fontFamily      String   @default("Inter")
  darkMode        Boolean  @default(false)
  customCSS       String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("UserThemes")
}

model DashboardWidget {
  id          String   @id @default(cuid())
  userId      String
  widgetType  String
  title       String
  description String?
  position    String
  size        String
  config      String
  dataSource  String?
  refreshRate Int      @default(300000)
  isVisible   Boolean  @default(true)
  isCollapsed Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("DashboardWidgets")
}

model DashboardLayout {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String   @default("Default Layout")
  isDefault   Boolean  @default(true)
  layout      String
  widgets     String
  gridSize    String   @default("12")
  breakpoints String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("DashboardLayouts")
}

model Product {
  id              String           @id @default(cuid())
  code            String           @unique
  barcode         String?
  name            String
  description     String?
  categoryId      String?
  unit            String           @default("adet")
  price           Decimal          @default(0)
  cost            Decimal          @default(0)
  taxRate         Decimal          @default(18)
  stock           Int              @default(0)
  minStock        Int              @default(0)
  maxStock        Int              @default(0)
  weight          Decimal?
  dimensions      String?
  images          String?
  backgroundColor String?          @default("#ffffff")
  textColor       String?          @default("#000000")
  isActive        Boolean          @default(true)
  isWeightable    Boolean          @default(false)
  isOpenPrice     Boolean          @default(false)
  plu             String?
  packageContent  Decimal?
  deposit         Decimal?         @default(0)
  displayOrder    Int              @default(0)
  tags            String?
  customFields    String?
  companyId       String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  category        ProductCategory? @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  company         Company          @relation(fields: [companyId], references: [id], onUpdate: NoAction)

  @@map("Products")
}

model ProductCategory {
  id          String            @id @default(cuid())
  name        String
  description String?
  parentId    String?
  icon        String?
  color       String?           @default("#3b82f6")
  sortOrder   Int               @default(0)
  isActive    Boolean           @default(true)
  companyId   String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  company     Company           @relation(fields: [companyId], references: [id], onUpdate: NoAction)
  parent      ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    ProductCategory[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("ProductCategories")
}

model ProductForm {
  id          String      @id @default(cuid())
  name        String
  description String?
  layout      String
  fields      String
  isActive    Boolean     @default(true)
  isDefault   Boolean     @default(false)
  companyId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  formFields  FormField[]
  company     Company     @relation(fields: [companyId], references: [id], onUpdate: NoAction)

  @@map("ProductForms")
}

model FormField {
  id           String      @id @default(cuid())
  formId       String
  name         String
  label        String
  type         String
  placeholder  String?
  required     Boolean     @default(false)
  options      String?
  validation   String?
  defaultValue String?
  position     Int         @default(0)
  width        String      @default("full")
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  form         ProductForm @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("FormFields")
}

model ReportUsers {
  id        String       @id @default(cuid())
  reportId  String
  userId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  report    ReportConfig @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reportId, userId])
  @@map("ReportUsers")
}

model CalendarEvent {
  id           String     @id @default(cuid())
  title        String
  description  String?
  startDate    DateTime
  endDate      DateTime?
  allDay       Boolean    @default(false)
  location     String?
  color        String     @default("#3b82f6")
  isRecurring  Boolean    @default(false)
  recurrence   String?
  reminderIds  String?
  companyId    String
  createdById  String
  assignedToId String?
  isCompleted  Boolean    @default(false)
  priority     String     @default("MEDIUM")
  category     String?
  tags         String?
  attachments  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  assignedTo   User?      @relation("CalendarEventAssignedTo", fields: [assignedToId], references: [id], onUpdate: NoAction)
  company      Company    @relation(fields: [companyId], references: [id], onUpdate: NoAction)
  createdBy    User       @relation("CalendarEventCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  reminders    Reminder[]

  @@map("CalendarEvents")
}

model Reminder {
  id              String         @id @default(cuid())
  title           String
  description     String?
  reminderDate    DateTime
  isCompleted     Boolean        @default(false)
  priority        String         @default("MEDIUM")
  category        String?
  tags            String?
  companyId       String
  createdById     String
  assignedToId    String?
  calendarEventId String?
  isRecurring     Boolean        @default(false)
  recurrence      String?
  attachments     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  assignedTo      User?          @relation("ReminderAssignedTo", fields: [assignedToId], references: [id], onUpdate: NoAction)
  calendarEvent   CalendarEvent? @relation(fields: [calendarEventId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  company         Company        @relation(fields: [companyId], references: [id], onUpdate: NoAction)
  createdBy       User           @relation("ReminderCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)

  @@map("Reminders")
}
